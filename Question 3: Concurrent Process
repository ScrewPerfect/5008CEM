#!/usr/bin/env python3
"""
concurrent_vs_sequential_fancy_commented.py

This script compares the performance of multithreading vs. sequential execution
when generating random numbers. It:
  1) Generates three sets of random numbers in parallel threads, measures time.
  2) Generates three sets sequentially, measures time.
  3) Prints round-by-round and summary tables with Unicode borders.

Each line is commented for clarity.
"""

import threading    # for creating and managing threads
import time         # for high-resolution timing
import random       # for random number generation

# Function to generate a list of random integers
def generate_random_numbers(count=100, lower=0, upper=10000):
    """
    Return a list of `count` random integers between `lower` and `upper` inclusive.
    """
    # Use list comprehension for concise generation
    return [random.randint(lower, upper) for _ in range(count)]

# Function to measure multithreading performance
def timed_multithread(rounds=10, sets_per_round=3):
    """
    Run `sets_per_round` threads per round, each generating random numbers.
    Return a list of elapsed times (ns) for each round.
    """
    def one_round():
        # Lists to record start and end timestamps of each thread
        starts, ends = [], []

        # Worker function executed by each thread
        def worker():
            starts.append(time.time_ns())      # record thread start time in ns
            generate_random_numbers()          # generate random numbers (workload)
            ends.append(time.time_ns())        # record thread end time in ns

        # Create the specified number of threads
        threads = [threading.Thread(target=worker) for _ in range(sets_per_round)]

        # Start all threads
        for t in threads:
            t.start()
        # Wait for all threads to complete
        for t in threads:
            t.join()

        # Compute the overall elapsed time: latest end minus earliest start
        return max(ends) - min(starts)

    # Run the above logic for the given number of rounds
    return [one_round() for _ in range(rounds)]

# Function to measure sequential performance
def timed_sequential(rounds=10, sets_per_round=3):
    """
    Execute the random-number generation sequentially `sets_per_round` times,
    for `rounds` rounds. Return elapsed times (ns) per round.
    """
    times = []  # list to collect elapsed times
    for _ in range(rounds):
        t0 = time.time_ns()                # record start time for this round
        for _ in range(sets_per_round):
            generate_random_numbers()      # perform workload sequentially
        t1 = time.time_ns()                # record end time for this round
        times.append(t1 - t0)              # compute and store elapsed time
    return times

# Helper to build and return a Unicode box-drawing table as a string
def format_table(headers, rows, padding=1):
    """
    Create a table with Unicode borders.
    headers: list of column titles
    rows: list of row lists (each row same length as headers)
    padding: spaces on each side of cell content
    """
    # Determine column widths based on header and cell content lengths
    col_widths = []
    for i, h in enumerate(headers):
        # maximum content width in column i
        max_cell = max((len(str(r[i])) for r in rows), default=0)
        # width is max of header and cell, plus padding on both sides
        col_widths.append(max(len(h), max_cell) + padding * 2)

    # Construct border pieces
    top    = '┌' + '┬'.join('─' * w for w in col_widths) + '┐'
    sep    = '├' + '┼'.join('─' * w for w in col_widths) + '┤'
    bottom = '└' + '┴'.join('─' * w for w in col_widths) + '┘'

    # Build header row with centered titles
    header_line = '│' + '│'.join(h.center(w) for h, w in zip(headers, col_widths)) + '│'

    # Build each data row
    row_lines = []
    for row in rows:
        cells = []
        for i, cell in enumerate(row):
            text = str(cell)
            # Center the first column (e.g., round number), right-align others
            if i == 0:
                cells.append(text.center(col_widths[i]))
            else:
                cells.append(text.rjust(col_widths[i]))
        row_lines.append('│' + '│'.join(cells) + '│')

    # Combine all parts into one string
    return '\n'.join([top, header_line, sep] + row_lines + [bottom])

# Main execution block
if __name__ == "__main__":
    # Seed RNG for reproducible results
    random.seed(0)

    # Measure multithreading times
    mt_times = timed_multithread()
    # Measure sequential times
    seq_times = timed_sequential()

    # Prepare and print round-by-round comparison
    headers = ["Round", "Multithreading (ns)", "Sequential (ns)", "Difference (ns)"]
    rows = []
    for i, (m, s) in enumerate(zip(mt_times, seq_times), start=1):
        rows.append([i, m, s, m - s])

    print("\nRound-by-Round Performance Comparison:")
    print(format_table(headers, rows))

    # Compute totals and averages
    total_mt = sum(mt_times)
    total_seq = sum(seq_times)
    total_diff = total_mt - total_seq

    avg_mt = total_mt / len(mt_times)
    avg_seq = total_seq / len(seq_times)
    avg_diff = avg_mt - avg_seq

    # Prepare and print summary
    sum_headers = ["Metric", "Multithreading", "Sequential", "Difference"]
    summary_rows = [
        ["Total Time (ns)",    total_mt,         total_seq,      total_diff],
        ["Average Time (ns)", f"{avg_mt:.1f}", f"{avg_seq:.1f}", f"{avg_diff:.1f}"]
    ]

    print("\nSummary of Results:")
    print(format_table(sum_headers, summary_rows))
